/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo, GraphQLScalarType } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
/**
 * Activation reason
 */
export const enum GQLActiveReason {
  
  /**
   * user-generated
   */
  USER = 'USER',
  
  /**
   * sleep duration expired
   */
  WAKEUP = 'WAKEUP',
  
  /**
   * new message came in
   */
  MESSAGE = 'MESSAGE'
}

export type GQLAttachmentBase = GQLImageAttachment | GQLVideoAttachment;

/** Use this to resolve union type AttachmentBase */
export type GQLPossibleAttachmentBaseTypeNames =
'ImageAttachment' |
'VideoAttachment';

export interface GQLAttachmentBaseNameMap {
  AttachmentBase: GQLAttachmentBase;
  ImageAttachment: GQLImageAttachment;
  VideoAttachment: GQLVideoAttachment;
}

export interface GQLAttachmentInput {
  
  /**
   * Name of file
   */
  name: string;
  
  /**
   * Encoding of asset - usually same as the extension (e.g. PNG, GIF, MP4). Inferred from asset if omitted
   */
  encoding?: string;
}

export interface GQLAttorney extends GQLIPerson {
  id: string;
  url: string;
  avatar?: GQLAWSURL;
  name?: string;
  timezone?: string;
  firm?: GQLFirm;
  role?: string;
  isAvailable?: boolean;
  nextNotification?: GQLAWSDateTime;
}

export interface GQLAttorneyCursor extends GQLCursor {
  edges?: Array<GQLAttorneyEdge | null>;
  pageInfo?: GQLPageInfo;
}

export interface GQLAttorneyEdge extends GQLEdge {
  cursor?: string;
  node?: GQLAttorney;
}

/**
 * Validated ISO 8601 Date Stamp
 */
export type GQLAWSDate = any;

/**
 * Validated ISO 8601 Date/Time Stamp
 */
export type GQLAWSDateTime = any;

/**
 * Validated email address
 */
export type GQLAWSEmail = any;

/**
 * Validated IPv4 Address
 */
export type GQLAWSIPAddress = any;

/**
 * Validated JSON
 */
export type GQLAWSJSON = any;

/**
 * Validated Phone Number
 */
export type GQLAWSPhone = any;

/**
 * Validated ISO 8601 Time Stamp
 */
export type GQLAWSTime = any;

/**
 * Validated URL
 */
export type GQLAWSURL = any;

export interface GQLCalendarEventInput {
  start?: GQLAWSDateTime;
  stop?: GQLAWSDateTime;
  calendar?: string;
  id?: string;
}

/**
 * Shape of client
 */
export interface GQLClient extends GQLIPerson {
  
  /**
   * globally unique identifier
   */
  url: string;
  
  /**
   * identifier unique within clients
   */
  id?: string;
  
  /**
   * name of individual
   */
  name?: string;
  
  /**
   * download URI of avatar
   */
  avatar?: GQLAWSURL;
}

/**
 * Fields necessary for creating a new attorney
 */
export interface GQLCreateAttorneyInput {
  
  /**
   * Real name of attorney as displayed to clients, co-counsel etc
   */
  name: string;
  
  /**
   * Email of attorney (must use either email or phone number)
   */
  email?: string;
  
  /**
   * Phone number of attorney (must use either email or phone number)
   */
  phoneNumber?: string;
  
  /**
   * Preferred username alternative login (often the Clio/Litify/Practice Panther ID)
   */
  preferredUserName?: string;
  
  /**
   * Initial password for creating the user (will be randomized and inaccessible if omitted)
   */
  initialPassword?: string;
}

export interface GQLCreateInvitationInput {
  name?: string;
  emails?: Array<GQLAWSEmail | null>;
  phoneNumbers?: Array<GQLAWSPhone | null>;
  recipientUri?: string;
  type?: GQLInvitationType;
}

export interface GQLCreateMessageInput {
  id?: string;
  body?: string;
  isPinned?: boolean;
  
  /**
   * Array of attachments to add to this message
   */
  attachments?: Array<GQLAttachmentInput | null>;
}

export interface GQLCreateScheduledMessageInput {
  id?: string;
  body?: string;
  sendDate?: GQLAWSDateTime;
  isPinned?: boolean;
  
  /**
   * Array of attachments to add to this message
   */
  attachments?: Array<GQLAttachmentInput | null>;
}

export interface GQLCursor {
  edges?: Array<GQLEdge | null>;
  pageInfo?: GQLPageInfo;
}

/** Use this to resolve interface type Cursor */
export type GQLPossibleCursorTypeNames =
'AttorneyCursor' |
'MessageCursor' |
'OpenInvitationCursor' |
'ParticipantCursor' |
'RoomCursor' |
'ScheduledMessageCursor' |
'SentInvitationCursor';

export interface GQLCursorNameMap {
  Cursor: GQLCursor;
  AttorneyCursor: GQLAttorneyCursor;
  MessageCursor: GQLMessageCursor;
  OpenInvitationCursor: GQLOpenInvitationCursor;
  ParticipantCursor: GQLParticipantCursor;
  RoomCursor: GQLRoomCursor;
  ScheduledMessageCursor: GQLScheduledMessageCursor;
  SentInvitationCursor: GQLSentInvitationCursor;
}

export interface GQLDeviceInput {
  token: string;
  platform: GQLDevicePlatform;
}

export const enum GQLDevicePlatform {
  IOS = 'IOS',
  ANDROID = 'ANDROID'
}

export interface GQLDeviceStatus {
  status?: string;
  date?: GQLAWSDate;
}

export interface GQLEdge {
  cursor?: string;
  node?: GQLNode;
}

/** Use this to resolve interface type Edge */
export type GQLPossibleEdgeTypeNames =
'AttorneyEdge' |
'MessageEdge' |
'OpenInvitationEdge' |
'ParticipantEdge' |
'RoomEdge' |
'ScheduledMessageEdge' |
'SentInvitationEdge';

export interface GQLEdgeNameMap {
  Edge: GQLEdge;
  AttorneyEdge: GQLAttorneyEdge;
  MessageEdge: GQLMessageEdge;
  OpenInvitationEdge: GQLOpenInvitationEdge;
  ParticipantEdge: GQLParticipantEdge;
  RoomEdge: GQLRoomEdge;
  ScheduledMessageEdge: GQLScheduledMessageEdge;
  SentInvitationEdge: GQLSentInvitationEdge;
}

/**
 * Institution with a Privilege account
 */
export interface GQLFirm {
  
  /**
   * Unique identifier of firm
   */
  id?: string;
  
  /**
   * Name as shown in correspondence (e.g. Jane Roe P.C.)
   */
  name?: string;
  
  /**
   * Background image of firm
   */
  backgroundUrl?: GQLAWSURL;
  
  /**
   * Get all attorneys, paginated with relay-style cursor
   */
  attorneys?: GQLAttorneyCursor;
  
  /**
   * Upload URL for replacing the background image of the firm
   */
  backgroundUploadUrl?: GQLAWSURL;
  
  /**
   * Package for server-server communication (for Premium accounts)
   */
  appClient?: GQLoAuthClient;
}

/**
 * Updates to firm
 */
export interface GQLFirmInput {
  
  /**
   * Human-readable name of firm (e.g. Jane Smith & Associates LLP)
   */
  name?: string;
}

/**
 * Common fields for asset attachments
 */
export interface GQLIAttachment {
  
  /**
   * URL for attachment
   */
  url: string;
  
  /**
   * Name of file
   */
  name: string;
  
  /**
   * URL for uploading asset (null if asset already uploaded)
   */
  uploadUrl?: GQLAWSURL;
  
  /**
   * URL for downloading asset (null if asset requires upload)
   */
  downloadUrl?: GQLAWSURL;
  
  /**
   * Encoding of asset - usually same as the extension (e.g. PNG, GIF, MP4)
   */
  encoding?: string;
}

/** Use this to resolve interface type IAttachment */
export type GQLPossibleIAttachmentTypeNames =
'ImageAttachment' |
'VideoAttachment';

export interface GQLIAttachmentNameMap {
  IAttachment: GQLIAttachment;
  ImageAttachment: GQLImageAttachment;
  VideoAttachment: GQLVideoAttachment;
}

export interface GQLImageAttachment extends GQLIAttachment {
  
  /**
   * URL for attachment
   */
  url: string;
  
  /**
   * Name of file
   */
  name: string;
  
  /**
   * URL for uploading asset (null if asset already uploaded)
   */
  uploadUrl?: GQLAWSURL;
  
  /**
   * URL for downloading asset (null if asset requires upload)
   */
  downloadUrl?: GQLAWSURL;
  
  /**
   * Height of image in pixels
   */
  height: number;
  
  /**
   * Width of image in pixels
   */
  width: number;
  
  /**
   * Encoding of asset - usually same as the extension (e.g. PNG, GIF, MP4)
   */
  encoding: string;
}

export interface GQLIMessage {
  id: string;
  url: string;
  author: GQLParticipant;
  body?: string;
  attachments?: Array<GQLAttachmentBase | null>;
  room: GQLRoom;
  isPinned?: boolean;
  createDate?: GQLAWSDateTime;
}

/** Use this to resolve interface type IMessage */
export type GQLPossibleIMessageTypeNames = 'Message' | 'ScheduledMessage';

export interface GQLIMessageNameMap {
  IMessage: GQLIMessage;
  Message: GQLMessage;
  ScheduledMessage: GQLScheduledMessage;
}

export type GQLInvitation = GQLSentInvitation | GQLOpenInvitation;

/** Use this to resolve union type Invitation */
export type GQLPossibleInvitationTypeNames =
'SentInvitation' |
'OpenInvitation';

export interface GQLInvitationNameMap {
  Invitation: GQLInvitation;
  SentInvitation: GQLSentInvitation;
  OpenInvitation: GQLOpenInvitation;
}

export interface GQLInvitationBase {
  id: string;
  sender?: GQLPerson;
}

/** Use this to resolve interface type InvitationBase */
export type GQLPossibleInvitationBaseTypeNames =
'OpenInvitation' |
'SentInvitation';

export interface GQLInvitationBaseNameMap {
  InvitationBase: GQLInvitationBase;
  OpenInvitation: GQLOpenInvitation;
  SentInvitation: GQLSentInvitation;
}

export interface GQLInvitationRefusalInput {
  body?: string;
}

export const enum GQLInvitationState {
  UNSENT = 'UNSENT',
  SENT = 'SENT',
  EXPIRED = 'EXPIRED',
  ACCEPTED = 'ACCEPTED'
}

export const enum GQLInvitationType {
  ATTORNEY = 'ATTORNEY',
  CLIENT = 'CLIENT'
}

/**
 * Websockets connection information
 */
export interface GQLIOT {
  
  /**
   * URI of the websocket host
   */
  host?: string;
  
  /**
   * AccessKey for connecting
   */
  accessKeyId?: string;
  
  /**
   * Second security token
   */
  sessionToken?: string;
  
  /**
   * AWS-specific key for subscribing to the websocket
   */
  region?: string;
  
  /**
   * Identifier for information stream
   */
  topic?: string;
  
  /**
   * Identifier for connection
   */
  id?: string;
  
  /**
   * Third security token
   */
  secretKey?: string;
}

export interface GQLIPerson {
  url: string;
  name?: string;
  avatar?: GQLAWSURL;
}

/** Use this to resolve interface type IPerson */
export type GQLPossibleIPersonTypeNames = 'Attorney' | 'Client';

export interface GQLIPersonNameMap {
  IPerson: GQLIPerson;
  Attorney: GQLAttorney;
  Client: GQLClient;
}

/**
 * Base message for privileged communications
 */
export interface GQLMessage extends GQLIMessage {
  id: string;
  url: string;
  author: GQLParticipant;
  body?: string;
  room: GQLRoom;
  isRead?: boolean;
  isHidden?: boolean;
  isPinned?: boolean;
  createDate?: GQLAWSDateTime;
  readers?: Array<GQLReader | null>;
  
  /**
   * Array of attachments on this message
   */
  attachments?: Array<GQLAttachmentBase | null>;
}

export type GQLMessageBase = GQLMessage | GQLScheduledMessage;

/** Use this to resolve union type MessageBase */
export type GQLPossibleMessageBaseTypeNames = 'Message' | 'ScheduledMessage';

export interface GQLMessageBaseNameMap {
  MessageBase: GQLMessageBase;
  Message: GQLMessage;
  ScheduledMessage: GQLScheduledMessage;
}

export interface GQLMessageCursor extends GQLCursor {
  edges?: Array<GQLMessageEdge | null>;
  pageInfo?: GQLPageInfo;
}

export interface GQLMessageEdge extends GQLEdge {
  cursor?: string;
  node?: GQLMessage;
}

export interface GQLMutation {
  registerDevice?: GQLDeviceStatus;
  unregisterDevice?: GQLDeviceStatus;
  createInvitation?: GQLSentInvitation;
  acceptInvitationCode?: GQLOpenInvitation;
  acceptInvitation?: GQLRoom;
  refuseInvitation?: boolean;
  updateInvitation?: GQLSentInvitation;
  rescindInvitation?: boolean;
  createMessage?: GQLMessage;
  pin?: GQLMessageBase;
  unPin?: GQLMessageBase;
  markAsRead?: Array<GQLMessage | null>;
  removeFromRoom?: GQLRoom;
  updateRoom?: GQLRoom;
  createRoom?: GQLRoom;
  deleteRoom?: boolean;
  requestReport?: GQLRoom;
  snoozeRoom?: GQLRoom;
  activateRoom?: GQLRoom;
  archiveRoom?: GQLRoom;
  unarchiveRoom?: GQLRoom;
  createScheduledMessage?: GQLScheduledMessage;
  updateScheduledMessage?: GQLScheduledMessage;
  deleteScheduledMessage?: boolean;
  acceptEmergency?: GQLRoom;
  refuseEmegency?: GQLRoom;
  
  /**
   * Make changes to firm
   */
  updateFirm?: GQLFirm;
  
  /**
   * Create a new oAuth app client (for Premium accounts)
   */
  createFirmAppClient?: GQLFirm;
  
  /**
   * Delete app client (for Premium acounts)
   */
  deleteFirmAppClient?: GQLFirm;
  
  /**
   * Add a new attorney to the firm
   */
  createAttorney?: GQLAttorney;
  
  /**
   * Change password for an attorney
   */
  setAttorneyPassword?: GQLAttorney;
  markAsHidden?: Array<GQLMessage | null>;
  markAsUnhidden?: Array<GQLMessage | null>;
  sendPushNotification?: GQLUser;
  sendPushNotificationPayload?: GQLUser;
  updateParticipant?: GQLParticipant;
  hideAllInRoom?: GQLRoom;
  showAllInRoom?: GQLRoom;
  updateUser?: GQLUser;
  addCalendar?: GQLUser;
  removeCalendar?: GQLUser;
  addCalendarEvents?: GQLUser;
  addNotification?: GQLUser;
  addEmergencyNotification?: GQLUser;
  removeContact?: GQLUser;
  requestContact?: GQLUser;
  confirmContact?: GQLUser;
  permanentlyDisableUser?: GQLUser;
}

export type GQLNode =
GQLAttorney |
GQLSentInvitation |
GQLOpenInvitation |
GQLMessage |
GQLParticipant |
GQLRoom |
GQLScheduledMessage;

/** Use this to resolve union type Node */
export type GQLPossibleNodeTypeNames =
'Attorney' |
'SentInvitation' |
'OpenInvitation' |
'Message' |
'Participant' |
'Room' |
'ScheduledMessage';

export interface GQLNodeNameMap {
  Node: GQLNode;
  Attorney: GQLAttorney;
  SentInvitation: GQLSentInvitation;
  OpenInvitation: GQLOpenInvitation;
  Message: GQLMessage;
  Participant: GQLParticipant;
  Room: GQLRoom;
  ScheduledMessage: GQLScheduledMessage;
}

export interface GQLNotification {
  type?: GQLNotificationType;
  contact?: string;
}

export interface GQLNotificationInput {
  type: GQLNotificationType;
  contact?: string;
}

export const enum GQLNotificationState {
  ACTIVE = 'ACTIVE',
  SNOOZED = 'SNOOZED'
}

export const enum GQLNotificationType {
  EMAIL = 'EMAIL',
  INAPPNOTIFICATION = 'INAPPNOTIFICATION',
  SMS = 'SMS',
  VOICE = 'VOICE'
}

/**
 * Fields necessary for ticket-based server-server or CLI use of Privilege API.
 * Sample code at https://github.com/Element55/node-gql-client
 */
export interface GQLoAuthClient {
  
  /**
   * oAuth client ID
   */
  clientId: string;
  
  /**
   * HTTPS endpoint for making graphQL requests
   */
  graphqlEndpoint: string;
  
  /**
   * oAuth endpoint for ticket management
   */
  tokenEndpoint: string;
  
  /**
   * Secret for client. Identifier required.
   */
  clientSecret: string;
}

export interface GQLOfficeHour {
  start?: string;
  stop?: string;
  label?: string;
}

export interface GQLOfficeHourInput {
  start?: string;
  stop?: string;
  label?: string;
}

export interface GQLOpenInvitation extends GQLInvitationBase {
  id: string;
  sender?: GQLPerson;
}

export interface GQLOpenInvitationCursor extends GQLCursor {
  edges?: Array<GQLOpenInvitationEdge | null>;
  pageInfo?: GQLPageInfo;
}

export interface GQLOpenInvitationEdge extends GQLEdge {
  cursor?: string;
  node?: GQLOpenInvitation;
}

export interface GQLPageInfo {
  hasNextPage: boolean;
  hasPreviousPage: boolean;
  firstCursor?: string;
  lastCursor?: string;
}

export interface GQLParticipant {
  id?: string;
  person?: GQLPerson;
  emergencyContact?: boolean;
  pendingNotification?: boolean;
}

export interface GQLParticipantCursor extends GQLCursor {
  edges?: Array<GQLParticipantEdge | null>;
  pageInfo?: GQLPageInfo;
}

export interface GQLParticipantEdge extends GQLEdge {
  cursor?: string;
  node?: GQLParticipant;
}

export const enum GQLParticipantFilter {
  CLIENTS = 'CLIENTS',
  ATTORNEYS = 'ATTORNEYS',
  PENDINGNOTIFICATIONS = 'PENDINGNOTIFICATIONS'
}

export interface GQLParticipantInput {
  alwaysNotify?: boolean;
  emergencyContact?: boolean;
}

export interface GQLParticipantState {
  activeMessage?: string;
  isParticipant?: boolean;
  unreadMessages?: number;
  snoozeDate?: GQLAWSDateTime;
  activateDate?: GQLAWSDateTime;
  activeReason?: GQLActiveReason;
  state?: GQLNotificationState;
  alwaysNotify?: boolean;
}

export type GQLPerson = GQLAttorney | GQLClient;

/** Use this to resolve union type Person */
export type GQLPossiblePersonTypeNames = 'Attorney' | 'Client';

export interface GQLPersonNameMap {
  Person: GQLPerson;
  Attorney: GQLAttorney;
  Client: GQLClient;
}

export interface GQLQuery {
  getAttorney?: GQLAttorney;
  
  /**
   * Retrieve client by id
   */
  getClient?: GQLClient;
  getSentInvitations?: GQLSentInvitationCursor;
  getOpenInvitations?: GQLOpenInvitationCursor;
  getOpenInvitation?: GQLOpenInvitation;
  getSentInvitation?: GQLSentInvitation;
  getMessages?: GQLMessageCursor;
  getMessage?: GQLMessage;
  getParticipants?: GQLParticipantCursor;
  getParticipant?: GQLParticipant;
  getRoom?: GQLRoom;
  getRooms?: GQLRoomCursor;
  getRoomParticipants?: GQLParticipantCursor;
  getScheduledMessages?: GQLScheduledMessageCursor;
  getScheduledMessage?: GQLScheduledMessage;
  
  /**
   * Retrieve firm
   */
  getFirm?: GQLFirm;
  
  /**
   * Get all attorneys for a firm
   */
  getAttorneys?: GQLAttorneyCursor;
  getUser?: GQLUser;
}

export interface GQLReader {
  participant?: GQLParticipant;
  date?: GQLAWSDateTime;
}

export interface GQLRoom {
  id?: string;
  owner?: GQLClient;
  name?: string;
  emergencyDate?: string;
  retention?: number;
  backgroundImageUrl?: GQLAWSURL;
  participantState?: GQLParticipantState;
  lastMessage?: GQLMessage;
  isArchived?: boolean;
  archiveDate?: GQLAWSDateTime;
  isOwner?: boolean;
  participants?: GQLParticipantCursor;
  invitations?: GQLSentInvitationCursor;
  reportDate?: GQLAWSDateTime;
  reportUrl?: GQLAWSURL;
  reportRequested?: boolean;
  reportRequestDate?: GQLAWSDateTime;
  inEmergency?: boolean;
  messages?: GQLMessageCursor;
  scheduledMessages?: GQLScheduledMessageCursor;
}

export interface GQLRoomCursor extends GQLCursor {
  edges?: Array<GQLRoomEdge | null>;
  pageInfo?: GQLPageInfo;
}

export interface GQLRoomEdge extends GQLEdge {
  cursor?: string;
  node?: GQLRoom;
}

export interface GQLRoomInput {
  name?: string;
  retention?: number;
}

export interface GQLScheduledMessage extends GQLIMessage {
  id: string;
  url: string;
  author: GQLParticipant;
  body?: string;
  room: GQLRoom;
  sendDate?: GQLAWSDateTime;
  isPinned?: boolean;
  createDate?: GQLAWSDateTime;
  
  /**
   * Array of attachments on this message
   */
  attachments?: Array<GQLAttachmentBase | null>;
}

export interface GQLScheduledMessageCursor extends GQLCursor {
  edges?: Array<GQLScheduledMessageEdge | null>;
  pageInfo?: GQLPageInfo;
}

export interface GQLScheduledMessageEdge extends GQLEdge {
  cursor?: string;
  node?: GQLScheduledMessage;
}

export interface GQLSentInvitation extends GQLInvitationBase {
  id: string;
  recipient?: GQLPerson;
  state?: GQLInvitationState;
  emails?: Array<GQLAWSEmail | null>;
  phoneNumbers?: Array<GQLAWSPhone | null>;
  type?: GQLInvitationType;
  sender?: GQLPerson;
  room?: GQLRoom;
  code?: string;
}

export interface GQLSentInvitationCursor extends GQLCursor {
  edges?: Array<GQLSentInvitationEdge | null>;
  pageInfo?: GQLPageInfo;
}

export interface GQLSentInvitationEdge extends GQLEdge {
  cursor?: string;
  node?: GQLSentInvitation;
}

export interface GQLTimelineEvent {
  start?: GQLAWSDateTime;
  stop?: GQLAWSDateTime;
  date?: GQLAWSDateTime;
  type: string;
}

export interface GQLUpdateInvitationInput {
  name?: string;
  emails?: Array<GQLAWSEmail | null>;
  phoneNumbers?: Array<GQLAWSPhone | null>;
  recipientUri?: string;
  type?: GQLInvitationType;
}

export interface GQLUpdateScheduledMessageInput {
  body?: string;
  sendDate?: GQLAWSDateTime;
  isPinned?: boolean;
}

export interface GQLUrl {
  
  /**
   * Utility type for returning a URL for next-stage use
   */
  url?: GQLAWSURL;
}

export interface GQLUser {
  id?: string;
  avatarUploadUrl?: GQLAWSURL;
  avatarDownloadUrl?: GQLAWSURL;
  firmBackgroundUrl?: GQLAWSURL;
  firmBackgroundUploadUrl?: GQLAWSURL;
  name?: string;
  availabilityTimeline?: Array<GQLTimelineEvent | null>;
  officeHours?: Array<GQLOfficeHour | null>;
  calendars?: Array<string | null>;
  iot?: GQLIOT;
  attorney?: GQLAttorney;
  emergencyNotifications?: Array<GQLNotification | null>;
  notifications?: Array<GQLNotification | null>;
  contacts?: Array<string | null>;
  emergencyAgreement?: string;
}

export interface GQLUserInput {
  name?: string;
  timezone?: string;
  events?: Array<GQLCalendarEventInput>;
  emergencyNotifications?: Array<GQLNotificationInput>;
  notifications?: Array<GQLNotificationInput>;
  calendars?: Array<string | null>;
  officeHours?: Array<GQLOfficeHourInput | null>;
  emergencyAgreement?: string;
}

export interface GQLVideoAttachment extends GQLIAttachment {
  
  /**
   * URL for attachment
   */
  url: string;
  
  /**
   * Name of file
   */
  name: string;
  
  /**
   * URL for uploading asset (null if asset already uploaded)
   */
  uploadUrl?: GQLAWSURL;
  
  /**
   * URL for downloading asset (null if asset requires upload)
   */
  downloadUrl?: GQLAWSURL;
  
  /**
   * Height of video in pixels
   */
  height: number;
  
  /**
   * Width of video in pixels
   */
  width: number;
  
  /**
   * Duration of video in seconds
   */
  duration: number;
  
  /**
   * Encoding of asset - usually same as the extension (e.g. PNG, GIF, MP4)
   */
  encoding: string;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  AttachmentBase?: {
    __resolveType: GQLAttachmentBaseTypeResolver
  };
  
  Attorney?: GQLAttorneyTypeResolver;
  AttorneyCursor?: GQLAttorneyCursorTypeResolver;
  AttorneyEdge?: GQLAttorneyEdgeTypeResolver;
  AWSDate?: GraphQLScalarType;
  AWSDateTime?: GraphQLScalarType;
  AWSEmail?: GraphQLScalarType;
  AWSIPAddress?: GraphQLScalarType;
  AWSJSON?: GraphQLScalarType;
  AWSPhone?: GraphQLScalarType;
  AWSTime?: GraphQLScalarType;
  AWSURL?: GraphQLScalarType;
  Client?: GQLClientTypeResolver;
  Cursor?: {
    __resolveType: GQLCursorTypeResolver
  };
  
  DeviceStatus?: GQLDeviceStatusTypeResolver;
  Edge?: {
    __resolveType: GQLEdgeTypeResolver
  };
  
  Firm?: GQLFirmTypeResolver;
  IAttachment?: {
    __resolveType: GQLIAttachmentTypeResolver
  };
  
  ImageAttachment?: GQLImageAttachmentTypeResolver;
  IMessage?: {
    __resolveType: GQLIMessageTypeResolver
  };
  
  Invitation?: {
    __resolveType: GQLInvitationTypeResolver
  };
  
  InvitationBase?: {
    __resolveType: GQLInvitationBaseTypeResolver
  };
  
  IOT?: GQLIOTTypeResolver;
  IPerson?: {
    __resolveType: GQLIPersonTypeResolver
  };
  
  Message?: GQLMessageTypeResolver;
  MessageBase?: {
    __resolveType: GQLMessageBaseTypeResolver
  };
  
  MessageCursor?: GQLMessageCursorTypeResolver;
  MessageEdge?: GQLMessageEdgeTypeResolver;
  Mutation?: GQLMutationTypeResolver;
  Node?: {
    __resolveType: GQLNodeTypeResolver
  };
  
  Notification?: GQLNotificationTypeResolver;
  oAuthClient?: GQLoAuthClientTypeResolver;
  OfficeHour?: GQLOfficeHourTypeResolver;
  OpenInvitation?: GQLOpenInvitationTypeResolver;
  OpenInvitationCursor?: GQLOpenInvitationCursorTypeResolver;
  OpenInvitationEdge?: GQLOpenInvitationEdgeTypeResolver;
  PageInfo?: GQLPageInfoTypeResolver;
  Participant?: GQLParticipantTypeResolver;
  ParticipantCursor?: GQLParticipantCursorTypeResolver;
  ParticipantEdge?: GQLParticipantEdgeTypeResolver;
  ParticipantState?: GQLParticipantStateTypeResolver;
  Person?: {
    __resolveType: GQLPersonTypeResolver
  };
  
  Query?: GQLQueryTypeResolver;
  Reader?: GQLReaderTypeResolver;
  Room?: GQLRoomTypeResolver;
  RoomCursor?: GQLRoomCursorTypeResolver;
  RoomEdge?: GQLRoomEdgeTypeResolver;
  ScheduledMessage?: GQLScheduledMessageTypeResolver;
  ScheduledMessageCursor?: GQLScheduledMessageCursorTypeResolver;
  ScheduledMessageEdge?: GQLScheduledMessageEdgeTypeResolver;
  SentInvitation?: GQLSentInvitationTypeResolver;
  SentInvitationCursor?: GQLSentInvitationCursorTypeResolver;
  SentInvitationEdge?: GQLSentInvitationEdgeTypeResolver;
  TimelineEvent?: GQLTimelineEventTypeResolver;
  Url?: GQLUrlTypeResolver;
  User?: GQLUserTypeResolver;
  VideoAttachment?: GQLVideoAttachmentTypeResolver;
}
export interface GQLAttachmentBaseTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'ImageAttachment' | 'VideoAttachment';
}
export interface GQLAttorneyTypeResolver<TParent = any> {
  id?: AttorneyToIdResolver<TParent>;
  url?: AttorneyToUrlResolver<TParent>;
  avatar?: AttorneyToAvatarResolver<TParent>;
  name?: AttorneyToNameResolver<TParent>;
  timezone?: AttorneyToTimezoneResolver<TParent>;
  firm?: AttorneyToFirmResolver<TParent>;
  role?: AttorneyToRoleResolver<TParent>;
  isAvailable?: AttorneyToIsAvailableResolver<TParent>;
  nextNotification?: AttorneyToNextNotificationResolver<TParent>;
}

export interface AttorneyToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AttorneyToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AttorneyToAvatarResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AttorneyToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AttorneyToTimezoneResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AttorneyToFirmResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AttorneyToRoleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AttorneyToIsAvailableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AttorneyToNextNotificationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAttorneyCursorTypeResolver<TParent = any> {
  edges?: AttorneyCursorToEdgesResolver<TParent>;
  pageInfo?: AttorneyCursorToPageInfoResolver<TParent>;
}

export interface AttorneyCursorToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AttorneyCursorToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAttorneyEdgeTypeResolver<TParent = any> {
  cursor?: AttorneyEdgeToCursorResolver<TParent>;
  node?: AttorneyEdgeToNodeResolver<TParent>;
}

export interface AttorneyEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AttorneyEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLClientTypeResolver<TParent = any> {
  url?: ClientToUrlResolver<TParent>;
  id?: ClientToIdResolver<TParent>;
  name?: ClientToNameResolver<TParent>;
  avatar?: ClientToAvatarResolver<TParent>;
}

export interface ClientToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClientToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClientToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClientToAvatarResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCursorTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'AttorneyCursor' | 'MessageCursor' | 'OpenInvitationCursor' | 'ParticipantCursor' | 'RoomCursor' | 'ScheduledMessageCursor' | 'SentInvitationCursor';
}
export interface GQLDeviceStatusTypeResolver<TParent = any> {
  status?: DeviceStatusToStatusResolver<TParent>;
  date?: DeviceStatusToDateResolver<TParent>;
}

export interface DeviceStatusToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeviceStatusToDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLEdgeTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'AttorneyEdge' | 'MessageEdge' | 'OpenInvitationEdge' | 'ParticipantEdge' | 'RoomEdge' | 'ScheduledMessageEdge' | 'SentInvitationEdge';
}
export interface GQLFirmTypeResolver<TParent = any> {
  id?: FirmToIdResolver<TParent>;
  name?: FirmToNameResolver<TParent>;
  backgroundUrl?: FirmToBackgroundUrlResolver<TParent>;
  attorneys?: FirmToAttorneysResolver<TParent>;
  backgroundUploadUrl?: FirmToBackgroundUploadUrlResolver<TParent>;
  appClient?: FirmToAppClientResolver<TParent>;
}

export interface FirmToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FirmToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FirmToBackgroundUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FirmToAttorneysArgs {
  lastPage?: string;
}
export interface FirmToAttorneysResolver<TParent = any, TResult = any> {
  (parent: TParent, args: FirmToAttorneysArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FirmToBackgroundUploadUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FirmToAppClientResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLIAttachmentTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'ImageAttachment' | 'VideoAttachment';
}
export interface GQLImageAttachmentTypeResolver<TParent = any> {
  url?: ImageAttachmentToUrlResolver<TParent>;
  name?: ImageAttachmentToNameResolver<TParent>;
  uploadUrl?: ImageAttachmentToUploadUrlResolver<TParent>;
  downloadUrl?: ImageAttachmentToDownloadUrlResolver<TParent>;
  height?: ImageAttachmentToHeightResolver<TParent>;
  width?: ImageAttachmentToWidthResolver<TParent>;
  encoding?: ImageAttachmentToEncodingResolver<TParent>;
}

export interface ImageAttachmentToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ImageAttachmentToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ImageAttachmentToUploadUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ImageAttachmentToDownloadUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ImageAttachmentToHeightResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ImageAttachmentToWidthResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ImageAttachmentToEncodingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLIMessageTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Message' | 'ScheduledMessage';
}
export interface GQLInvitationTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'SentInvitation' | 'OpenInvitation';
}
export interface GQLInvitationBaseTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'OpenInvitation' | 'SentInvitation';
}
export interface GQLIOTTypeResolver<TParent = any> {
  host?: IOTToHostResolver<TParent>;
  accessKeyId?: IOTToAccessKeyIdResolver<TParent>;
  sessionToken?: IOTToSessionTokenResolver<TParent>;
  region?: IOTToRegionResolver<TParent>;
  topic?: IOTToTopicResolver<TParent>;
  id?: IOTToIdResolver<TParent>;
  secretKey?: IOTToSecretKeyResolver<TParent>;
}

export interface IOTToHostResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IOTToAccessKeyIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IOTToSessionTokenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IOTToRegionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IOTToTopicResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IOTToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IOTToSecretKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLIPersonTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Attorney' | 'Client';
}
export interface GQLMessageTypeResolver<TParent = any> {
  id?: MessageToIdResolver<TParent>;
  url?: MessageToUrlResolver<TParent>;
  author?: MessageToAuthorResolver<TParent>;
  body?: MessageToBodyResolver<TParent>;
  room?: MessageToRoomResolver<TParent>;
  isRead?: MessageToIsReadResolver<TParent>;
  isHidden?: MessageToIsHiddenResolver<TParent>;
  isPinned?: MessageToIsPinnedResolver<TParent>;
  createDate?: MessageToCreateDateResolver<TParent>;
  readers?: MessageToReadersResolver<TParent>;
  attachments?: MessageToAttachmentsResolver<TParent>;
}

export interface MessageToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MessageToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MessageToAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MessageToBodyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MessageToRoomResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MessageToIsReadResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MessageToIsHiddenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MessageToIsPinnedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MessageToCreateDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MessageToReadersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MessageToAttachmentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMessageBaseTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Message' | 'ScheduledMessage';
}
export interface GQLMessageCursorTypeResolver<TParent = any> {
  edges?: MessageCursorToEdgesResolver<TParent>;
  pageInfo?: MessageCursorToPageInfoResolver<TParent>;
}

export interface MessageCursorToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MessageCursorToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMessageEdgeTypeResolver<TParent = any> {
  cursor?: MessageEdgeToCursorResolver<TParent>;
  node?: MessageEdgeToNodeResolver<TParent>;
}

export interface MessageEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MessageEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMutationTypeResolver<TParent = any> {
  registerDevice?: MutationToRegisterDeviceResolver<TParent>;
  unregisterDevice?: MutationToUnregisterDeviceResolver<TParent>;
  createInvitation?: MutationToCreateInvitationResolver<TParent>;
  acceptInvitationCode?: MutationToAcceptInvitationCodeResolver<TParent>;
  acceptInvitation?: MutationToAcceptInvitationResolver<TParent>;
  refuseInvitation?: MutationToRefuseInvitationResolver<TParent>;
  updateInvitation?: MutationToUpdateInvitationResolver<TParent>;
  rescindInvitation?: MutationToRescindInvitationResolver<TParent>;
  createMessage?: MutationToCreateMessageResolver<TParent>;
  pin?: MutationToPinResolver<TParent>;
  unPin?: MutationToUnPinResolver<TParent>;
  markAsRead?: MutationToMarkAsReadResolver<TParent>;
  removeFromRoom?: MutationToRemoveFromRoomResolver<TParent>;
  updateRoom?: MutationToUpdateRoomResolver<TParent>;
  createRoom?: MutationToCreateRoomResolver<TParent>;
  deleteRoom?: MutationToDeleteRoomResolver<TParent>;
  requestReport?: MutationToRequestReportResolver<TParent>;
  snoozeRoom?: MutationToSnoozeRoomResolver<TParent>;
  activateRoom?: MutationToActivateRoomResolver<TParent>;
  archiveRoom?: MutationToArchiveRoomResolver<TParent>;
  unarchiveRoom?: MutationToUnarchiveRoomResolver<TParent>;
  createScheduledMessage?: MutationToCreateScheduledMessageResolver<TParent>;
  updateScheduledMessage?: MutationToUpdateScheduledMessageResolver<TParent>;
  deleteScheduledMessage?: MutationToDeleteScheduledMessageResolver<TParent>;
  acceptEmergency?: MutationToAcceptEmergencyResolver<TParent>;
  refuseEmegency?: MutationToRefuseEmegencyResolver<TParent>;
  updateFirm?: MutationToUpdateFirmResolver<TParent>;
  createFirmAppClient?: MutationToCreateFirmAppClientResolver<TParent>;
  deleteFirmAppClient?: MutationToDeleteFirmAppClientResolver<TParent>;
  createAttorney?: MutationToCreateAttorneyResolver<TParent>;
  setAttorneyPassword?: MutationToSetAttorneyPasswordResolver<TParent>;
  markAsHidden?: MutationToMarkAsHiddenResolver<TParent>;
  markAsUnhidden?: MutationToMarkAsUnhiddenResolver<TParent>;
  sendPushNotification?: MutationToSendPushNotificationResolver<TParent>;
  sendPushNotificationPayload?: MutationToSendPushNotificationPayloadResolver<TParent>;
  updateParticipant?: MutationToUpdateParticipantResolver<TParent>;
  hideAllInRoom?: MutationToHideAllInRoomResolver<TParent>;
  showAllInRoom?: MutationToShowAllInRoomResolver<TParent>;
  updateUser?: MutationToUpdateUserResolver<TParent>;
  addCalendar?: MutationToAddCalendarResolver<TParent>;
  removeCalendar?: MutationToRemoveCalendarResolver<TParent>;
  addCalendarEvents?: MutationToAddCalendarEventsResolver<TParent>;
  addNotification?: MutationToAddNotificationResolver<TParent>;
  addEmergencyNotification?: MutationToAddEmergencyNotificationResolver<TParent>;
  removeContact?: MutationToRemoveContactResolver<TParent>;
  requestContact?: MutationToRequestContactResolver<TParent>;
  confirmContact?: MutationToConfirmContactResolver<TParent>;
  permanentlyDisableUser?: MutationToPermanentlyDisableUserResolver<TParent>;
}

export interface MutationToRegisterDeviceArgs {
  device: GQLDeviceInput;
}
export interface MutationToRegisterDeviceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToRegisterDeviceArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUnregisterDeviceArgs {
  device: GQLDeviceInput;
}
export interface MutationToUnregisterDeviceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUnregisterDeviceArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateInvitationArgs {
  roomId?: string;
  invitation: GQLCreateInvitationInput;
}
export interface MutationToCreateInvitationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateInvitationArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAcceptInvitationCodeArgs {
  code: string;
}
export interface MutationToAcceptInvitationCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAcceptInvitationCodeArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAcceptInvitationArgs {
  id: string;
}
export interface MutationToAcceptInvitationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAcceptInvitationArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToRefuseInvitationArgs {
  id: string;
  refusal?: GQLInvitationRefusalInput;
}
export interface MutationToRefuseInvitationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToRefuseInvitationArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateInvitationArgs {
  id: string;
  invitation: GQLUpdateInvitationInput;
}
export interface MutationToUpdateInvitationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateInvitationArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToRescindInvitationArgs {
  id: string;
}
export interface MutationToRescindInvitationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToRescindInvitationArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateMessageArgs {
  roomId: string;
  message?: GQLCreateMessageInput;
}
export interface MutationToCreateMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateMessageArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToPinArgs {
  roomId?: string;
  id: string;
}
export interface MutationToPinResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToPinArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUnPinArgs {
  roomId?: string;
  id: string;
}
export interface MutationToUnPinResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUnPinArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToMarkAsReadArgs {
  roomId: string;
  messageIds: Array<string | null>;
}
export interface MutationToMarkAsReadResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToMarkAsReadArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToRemoveFromRoomArgs {
  roomId?: string;
  participantId?: string;
  force?: boolean;
}
export interface MutationToRemoveFromRoomResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToRemoveFromRoomArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateRoomArgs {
  id: string;
  room?: GQLRoomInput;
}
export interface MutationToUpdateRoomResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateRoomArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateRoomArgs {
  room?: GQLRoomInput;
}
export interface MutationToCreateRoomResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateRoomArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteRoomArgs {
  id: string;
}
export interface MutationToDeleteRoomResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteRoomArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToRequestReportArgs {
  id: string;
}
export interface MutationToRequestReportResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToRequestReportArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToSnoozeRoomArgs {
  id: string;
  until?: GQLAWSDateTime;
}
export interface MutationToSnoozeRoomResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToSnoozeRoomArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToActivateRoomArgs {
  id: string;
}
export interface MutationToActivateRoomResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToActivateRoomArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToArchiveRoomArgs {
  id: string;
}
export interface MutationToArchiveRoomResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToArchiveRoomArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUnarchiveRoomArgs {
  id: string;
}
export interface MutationToUnarchiveRoomResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUnarchiveRoomArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateScheduledMessageArgs {
  roomId: string;
  message: GQLCreateScheduledMessageInput;
}
export interface MutationToCreateScheduledMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateScheduledMessageArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateScheduledMessageArgs {
  roomId: string;
  scheduledMessageId: string;
  message: GQLUpdateScheduledMessageInput;
}
export interface MutationToUpdateScheduledMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateScheduledMessageArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteScheduledMessageArgs {
  roomId: string;
  scheduledMessageId?: string;
}
export interface MutationToDeleteScheduledMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteScheduledMessageArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAcceptEmergencyArgs {
  roomId: string;
}
export interface MutationToAcceptEmergencyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAcceptEmergencyArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToRefuseEmegencyArgs {
  roomId: string;
}
export interface MutationToRefuseEmegencyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToRefuseEmegencyArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateFirmArgs {
  id?: string;
  firm: GQLFirmInput;
}
export interface MutationToUpdateFirmResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateFirmArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateFirmAppClientResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteFirmAppClientResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateAttorneyArgs {
  attorney?: GQLCreateAttorneyInput;
}
export interface MutationToCreateAttorneyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateAttorneyArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToSetAttorneyPasswordArgs {
  attorneyId?: string;
  newPassword?: string;
}
export interface MutationToSetAttorneyPasswordResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToSetAttorneyPasswordArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToMarkAsHiddenArgs {
  roomId: string;
  messageIds?: Array<string | null>;
}
export interface MutationToMarkAsHiddenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToMarkAsHiddenArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToMarkAsUnhiddenArgs {
  roomId: string;
  messageIds?: Array<string | null>;
}
export interface MutationToMarkAsUnhiddenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToMarkAsUnhiddenArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToSendPushNotificationArgs {
  uri?: string;
  text: string;
}
export interface MutationToSendPushNotificationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToSendPushNotificationArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToSendPushNotificationPayloadArgs {
  payload: GQLAWSJSON;
  platform: GQLDevicePlatform;
  uri?: string;
  roomId?: string;
}
export interface MutationToSendPushNotificationPayloadResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToSendPushNotificationPayloadArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateParticipantArgs {
  roomId?: string;
  data: GQLParticipantInput;
}
export interface MutationToUpdateParticipantResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateParticipantArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToHideAllInRoomArgs {
  id: string;
}
export interface MutationToHideAllInRoomResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToHideAllInRoomArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToShowAllInRoomArgs {
  id: string;
}
export interface MutationToShowAllInRoomResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToShowAllInRoomArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateUserArgs {
  user: GQLUserInput;
}
export interface MutationToUpdateUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateUserArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAddCalendarArgs {
  id?: string;
}
export interface MutationToAddCalendarResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAddCalendarArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToRemoveCalendarArgs {
  id?: string;
}
export interface MutationToRemoveCalendarResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToRemoveCalendarArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAddCalendarEventsArgs {
  calendarEvents: Array<GQLCalendarEventInput>;
}
export interface MutationToAddCalendarEventsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAddCalendarEventsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAddNotificationArgs {
  notification: GQLNotificationInput;
}
export interface MutationToAddNotificationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAddNotificationArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAddEmergencyNotificationArgs {
  notification?: GQLNotificationInput;
}
export interface MutationToAddEmergencyNotificationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAddEmergencyNotificationArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToRemoveContactArgs {
  uri: string;
}
export interface MutationToRemoveContactResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToRemoveContactArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToRequestContactArgs {
  uri: string;
}
export interface MutationToRequestContactResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToRequestContactArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToConfirmContactArgs {
  code: string;
}
export interface MutationToConfirmContactResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToConfirmContactArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToPermanentlyDisableUserArgs {
  areYouSure: boolean;
}
export interface MutationToPermanentlyDisableUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToPermanentlyDisableUserArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLNodeTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Attorney' | 'SentInvitation' | 'OpenInvitation' | 'Message' | 'Participant' | 'Room' | 'ScheduledMessage';
}
export interface GQLNotificationTypeResolver<TParent = any> {
  type?: NotificationToTypeResolver<TParent>;
  contact?: NotificationToContactResolver<TParent>;
}

export interface NotificationToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NotificationToContactResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLoAuthClientTypeResolver<TParent = any> {
  clientId?: oAuthClientToClientIdResolver<TParent>;
  graphqlEndpoint?: oAuthClientToGraphqlEndpointResolver<TParent>;
  tokenEndpoint?: oAuthClientToTokenEndpointResolver<TParent>;
  clientSecret?: oAuthClientToClientSecretResolver<TParent>;
}

export interface oAuthClientToClientIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface oAuthClientToGraphqlEndpointResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface oAuthClientToTokenEndpointResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface oAuthClientToClientSecretResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOfficeHourTypeResolver<TParent = any> {
  start?: OfficeHourToStartResolver<TParent>;
  stop?: OfficeHourToStopResolver<TParent>;
  label?: OfficeHourToLabelResolver<TParent>;
}

export interface OfficeHourToStartResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OfficeHourToStopResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OfficeHourToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOpenInvitationTypeResolver<TParent = any> {
  id?: OpenInvitationToIdResolver<TParent>;
  sender?: OpenInvitationToSenderResolver<TParent>;
}

export interface OpenInvitationToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OpenInvitationToSenderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOpenInvitationCursorTypeResolver<TParent = any> {
  edges?: OpenInvitationCursorToEdgesResolver<TParent>;
  pageInfo?: OpenInvitationCursorToPageInfoResolver<TParent>;
}

export interface OpenInvitationCursorToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OpenInvitationCursorToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOpenInvitationEdgeTypeResolver<TParent = any> {
  cursor?: OpenInvitationEdgeToCursorResolver<TParent>;
  node?: OpenInvitationEdgeToNodeResolver<TParent>;
}

export interface OpenInvitationEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OpenInvitationEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPageInfoTypeResolver<TParent = any> {
  hasNextPage?: PageInfoToHasNextPageResolver<TParent>;
  hasPreviousPage?: PageInfoToHasPreviousPageResolver<TParent>;
  firstCursor?: PageInfoToFirstCursorResolver<TParent>;
  lastCursor?: PageInfoToLastCursorResolver<TParent>;
}

export interface PageInfoToHasNextPageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PageInfoToHasPreviousPageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PageInfoToFirstCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PageInfoToLastCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLParticipantTypeResolver<TParent = any> {
  id?: ParticipantToIdResolver<TParent>;
  person?: ParticipantToPersonResolver<TParent>;
  emergencyContact?: ParticipantToEmergencyContactResolver<TParent>;
  pendingNotification?: ParticipantToPendingNotificationResolver<TParent>;
}

export interface ParticipantToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ParticipantToPersonResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ParticipantToEmergencyContactResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ParticipantToPendingNotificationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLParticipantCursorTypeResolver<TParent = any> {
  edges?: ParticipantCursorToEdgesResolver<TParent>;
  pageInfo?: ParticipantCursorToPageInfoResolver<TParent>;
}

export interface ParticipantCursorToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ParticipantCursorToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLParticipantEdgeTypeResolver<TParent = any> {
  cursor?: ParticipantEdgeToCursorResolver<TParent>;
  node?: ParticipantEdgeToNodeResolver<TParent>;
}

export interface ParticipantEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ParticipantEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLParticipantStateTypeResolver<TParent = any> {
  activeMessage?: ParticipantStateToActiveMessageResolver<TParent>;
  isParticipant?: ParticipantStateToIsParticipantResolver<TParent>;
  unreadMessages?: ParticipantStateToUnreadMessagesResolver<TParent>;
  snoozeDate?: ParticipantStateToSnoozeDateResolver<TParent>;
  activateDate?: ParticipantStateToActivateDateResolver<TParent>;
  activeReason?: ParticipantStateToActiveReasonResolver<TParent>;
  state?: ParticipantStateToStateResolver<TParent>;
  alwaysNotify?: ParticipantStateToAlwaysNotifyResolver<TParent>;
}

export interface ParticipantStateToActiveMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ParticipantStateToIsParticipantResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ParticipantStateToUnreadMessagesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ParticipantStateToSnoozeDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ParticipantStateToActivateDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ParticipantStateToActiveReasonResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ParticipantStateToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ParticipantStateToAlwaysNotifyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPersonTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Attorney' | 'Client';
}
export interface GQLQueryTypeResolver<TParent = any> {
  getAttorney?: QueryToGetAttorneyResolver<TParent>;
  getClient?: QueryToGetClientResolver<TParent>;
  getSentInvitations?: QueryToGetSentInvitationsResolver<TParent>;
  getOpenInvitations?: QueryToGetOpenInvitationsResolver<TParent>;
  getOpenInvitation?: QueryToGetOpenInvitationResolver<TParent>;
  getSentInvitation?: QueryToGetSentInvitationResolver<TParent>;
  getMessages?: QueryToGetMessagesResolver<TParent>;
  getMessage?: QueryToGetMessageResolver<TParent>;
  getParticipants?: QueryToGetParticipantsResolver<TParent>;
  getParticipant?: QueryToGetParticipantResolver<TParent>;
  getRoom?: QueryToGetRoomResolver<TParent>;
  getRooms?: QueryToGetRoomsResolver<TParent>;
  getRoomParticipants?: QueryToGetRoomParticipantsResolver<TParent>;
  getScheduledMessages?: QueryToGetScheduledMessagesResolver<TParent>;
  getScheduledMessage?: QueryToGetScheduledMessageResolver<TParent>;
  getFirm?: QueryToGetFirmResolver<TParent>;
  getAttorneys?: QueryToGetAttorneysResolver<TParent>;
  getUser?: QueryToGetUserResolver<TParent>;
}

export interface QueryToGetAttorneyArgs {
  id: string;
}
export interface QueryToGetAttorneyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToGetAttorneyArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToGetClientArgs {
  id: string;
}
export interface QueryToGetClientResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToGetClientArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToGetSentInvitationsArgs {
  roomId?: string;
  lastPage?: string;
}
export interface QueryToGetSentInvitationsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToGetSentInvitationsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToGetOpenInvitationsArgs {
  lastPage?: string;
}
export interface QueryToGetOpenInvitationsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToGetOpenInvitationsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToGetOpenInvitationArgs {
  id: string;
}
export interface QueryToGetOpenInvitationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToGetOpenInvitationArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToGetSentInvitationArgs {
  id: string;
}
export interface QueryToGetSentInvitationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToGetSentInvitationArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToGetMessagesArgs {
  roomId: string;
  lastPage?: string;
}
export interface QueryToGetMessagesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToGetMessagesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToGetMessageArgs {
  roomId: string;
  id: string;
}
export interface QueryToGetMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToGetMessageArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToGetParticipantsArgs {
  roomId?: string;
  filter?: GQLParticipantFilter;
  lastPage?: string;
}
export interface QueryToGetParticipantsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToGetParticipantsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToGetParticipantArgs {
  roomid?: string;
  id?: string;
}
export interface QueryToGetParticipantResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToGetParticipantArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToGetRoomArgs {
  id: string;
}
export interface QueryToGetRoomResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToGetRoomArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToGetRoomsArgs {
  showArchived?: boolean;
  lastPage?: string;
}
export interface QueryToGetRoomsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToGetRoomsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToGetRoomParticipantsArgs {
  roomId: string;
  lastPage?: string;
}
export interface QueryToGetRoomParticipantsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToGetRoomParticipantsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToGetScheduledMessagesArgs {
  roomId: string;
  lastPage?: string;
}
export interface QueryToGetScheduledMessagesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToGetScheduledMessagesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToGetScheduledMessageArgs {
  roomId: string;
  id: string;
}
export interface QueryToGetScheduledMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToGetScheduledMessageArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToGetFirmArgs {
  id?: string;
}
export interface QueryToGetFirmResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToGetFirmArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToGetAttorneysArgs {
  id?: string;
  lastPage?: string;
}
export interface QueryToGetAttorneysResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToGetAttorneysArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToGetUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLReaderTypeResolver<TParent = any> {
  participant?: ReaderToParticipantResolver<TParent>;
  date?: ReaderToDateResolver<TParent>;
}

export interface ReaderToParticipantResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReaderToDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRoomTypeResolver<TParent = any> {
  id?: RoomToIdResolver<TParent>;
  owner?: RoomToOwnerResolver<TParent>;
  name?: RoomToNameResolver<TParent>;
  emergencyDate?: RoomToEmergencyDateResolver<TParent>;
  retention?: RoomToRetentionResolver<TParent>;
  backgroundImageUrl?: RoomToBackgroundImageUrlResolver<TParent>;
  participantState?: RoomToParticipantStateResolver<TParent>;
  lastMessage?: RoomToLastMessageResolver<TParent>;
  isArchived?: RoomToIsArchivedResolver<TParent>;
  archiveDate?: RoomToArchiveDateResolver<TParent>;
  isOwner?: RoomToIsOwnerResolver<TParent>;
  participants?: RoomToParticipantsResolver<TParent>;
  invitations?: RoomToInvitationsResolver<TParent>;
  reportDate?: RoomToReportDateResolver<TParent>;
  reportUrl?: RoomToReportUrlResolver<TParent>;
  reportRequested?: RoomToReportRequestedResolver<TParent>;
  reportRequestDate?: RoomToReportRequestDateResolver<TParent>;
  inEmergency?: RoomToInEmergencyResolver<TParent>;
  messages?: RoomToMessagesResolver<TParent>;
  scheduledMessages?: RoomToScheduledMessagesResolver<TParent>;
}

export interface RoomToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoomToOwnerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoomToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoomToEmergencyDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoomToRetentionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoomToBackgroundImageUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoomToParticipantStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoomToLastMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoomToIsArchivedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoomToArchiveDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoomToIsOwnerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoomToParticipantsArgs {
  showClients?: boolean;
  showAttorneys?: boolean;
  pendingNotifications?: boolean;
  lastPage?: string;
}
export interface RoomToParticipantsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RoomToParticipantsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoomToInvitationsArgs {
  lastPage?: string;
}
export interface RoomToInvitationsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RoomToInvitationsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoomToReportDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoomToReportUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoomToReportRequestedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoomToReportRequestDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoomToInEmergencyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoomToMessagesArgs {
  lastPage?: string;
}
export interface RoomToMessagesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RoomToMessagesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoomToScheduledMessagesArgs {
  lastPage?: string;
}
export interface RoomToScheduledMessagesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RoomToScheduledMessagesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRoomCursorTypeResolver<TParent = any> {
  edges?: RoomCursorToEdgesResolver<TParent>;
  pageInfo?: RoomCursorToPageInfoResolver<TParent>;
}

export interface RoomCursorToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoomCursorToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRoomEdgeTypeResolver<TParent = any> {
  cursor?: RoomEdgeToCursorResolver<TParent>;
  node?: RoomEdgeToNodeResolver<TParent>;
}

export interface RoomEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoomEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLScheduledMessageTypeResolver<TParent = any> {
  id?: ScheduledMessageToIdResolver<TParent>;
  url?: ScheduledMessageToUrlResolver<TParent>;
  author?: ScheduledMessageToAuthorResolver<TParent>;
  body?: ScheduledMessageToBodyResolver<TParent>;
  room?: ScheduledMessageToRoomResolver<TParent>;
  sendDate?: ScheduledMessageToSendDateResolver<TParent>;
  isPinned?: ScheduledMessageToIsPinnedResolver<TParent>;
  createDate?: ScheduledMessageToCreateDateResolver<TParent>;
  attachments?: ScheduledMessageToAttachmentsResolver<TParent>;
}

export interface ScheduledMessageToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ScheduledMessageToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ScheduledMessageToAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ScheduledMessageToBodyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ScheduledMessageToRoomResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ScheduledMessageToSendDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ScheduledMessageToIsPinnedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ScheduledMessageToCreateDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ScheduledMessageToAttachmentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLScheduledMessageCursorTypeResolver<TParent = any> {
  edges?: ScheduledMessageCursorToEdgesResolver<TParent>;
  pageInfo?: ScheduledMessageCursorToPageInfoResolver<TParent>;
}

export interface ScheduledMessageCursorToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ScheduledMessageCursorToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLScheduledMessageEdgeTypeResolver<TParent = any> {
  cursor?: ScheduledMessageEdgeToCursorResolver<TParent>;
  node?: ScheduledMessageEdgeToNodeResolver<TParent>;
}

export interface ScheduledMessageEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ScheduledMessageEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSentInvitationTypeResolver<TParent = any> {
  id?: SentInvitationToIdResolver<TParent>;
  recipient?: SentInvitationToRecipientResolver<TParent>;
  state?: SentInvitationToStateResolver<TParent>;
  emails?: SentInvitationToEmailsResolver<TParent>;
  phoneNumbers?: SentInvitationToPhoneNumbersResolver<TParent>;
  type?: SentInvitationToTypeResolver<TParent>;
  sender?: SentInvitationToSenderResolver<TParent>;
  room?: SentInvitationToRoomResolver<TParent>;
  code?: SentInvitationToCodeResolver<TParent>;
}

export interface SentInvitationToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SentInvitationToRecipientResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SentInvitationToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SentInvitationToEmailsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SentInvitationToPhoneNumbersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SentInvitationToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SentInvitationToSenderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SentInvitationToRoomResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SentInvitationToCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSentInvitationCursorTypeResolver<TParent = any> {
  edges?: SentInvitationCursorToEdgesResolver<TParent>;
  pageInfo?: SentInvitationCursorToPageInfoResolver<TParent>;
}

export interface SentInvitationCursorToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SentInvitationCursorToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSentInvitationEdgeTypeResolver<TParent = any> {
  cursor?: SentInvitationEdgeToCursorResolver<TParent>;
  node?: SentInvitationEdgeToNodeResolver<TParent>;
}

export interface SentInvitationEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SentInvitationEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTimelineEventTypeResolver<TParent = any> {
  start?: TimelineEventToStartResolver<TParent>;
  stop?: TimelineEventToStopResolver<TParent>;
  date?: TimelineEventToDateResolver<TParent>;
  type?: TimelineEventToTypeResolver<TParent>;
}

export interface TimelineEventToStartResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TimelineEventToStopResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TimelineEventToDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TimelineEventToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUrlTypeResolver<TParent = any> {
  url?: UrlToUrlResolver<TParent>;
}

export interface UrlToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUserTypeResolver<TParent = any> {
  id?: UserToIdResolver<TParent>;
  avatarUploadUrl?: UserToAvatarUploadUrlResolver<TParent>;
  avatarDownloadUrl?: UserToAvatarDownloadUrlResolver<TParent>;
  firmBackgroundUrl?: UserToFirmBackgroundUrlResolver<TParent>;
  firmBackgroundUploadUrl?: UserToFirmBackgroundUploadUrlResolver<TParent>;
  name?: UserToNameResolver<TParent>;
  availabilityTimeline?: UserToAvailabilityTimelineResolver<TParent>;
  officeHours?: UserToOfficeHoursResolver<TParent>;
  calendars?: UserToCalendarsResolver<TParent>;
  iot?: UserToIotResolver<TParent>;
  attorney?: UserToAttorneyResolver<TParent>;
  emergencyNotifications?: UserToEmergencyNotificationsResolver<TParent>;
  notifications?: UserToNotificationsResolver<TParent>;
  contacts?: UserToContactsResolver<TParent>;
  emergencyAgreement?: UserToEmergencyAgreementResolver<TParent>;
}

export interface UserToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToAvatarUploadUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToAvatarDownloadUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToFirmBackgroundUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToFirmBackgroundUploadUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToAvailabilityTimelineResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToOfficeHoursResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToCalendarsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToIotResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToAttorneyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToEmergencyNotificationsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToNotificationsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToContactsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToEmergencyAgreementResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLVideoAttachmentTypeResolver<TParent = any> {
  url?: VideoAttachmentToUrlResolver<TParent>;
  name?: VideoAttachmentToNameResolver<TParent>;
  uploadUrl?: VideoAttachmentToUploadUrlResolver<TParent>;
  downloadUrl?: VideoAttachmentToDownloadUrlResolver<TParent>;
  height?: VideoAttachmentToHeightResolver<TParent>;
  width?: VideoAttachmentToWidthResolver<TParent>;
  duration?: VideoAttachmentToDurationResolver<TParent>;
  encoding?: VideoAttachmentToEncodingResolver<TParent>;
}

export interface VideoAttachmentToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VideoAttachmentToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VideoAttachmentToUploadUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VideoAttachmentToDownloadUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VideoAttachmentToHeightResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VideoAttachmentToWidthResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VideoAttachmentToDurationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VideoAttachmentToEncodingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
